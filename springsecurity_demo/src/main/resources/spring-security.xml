<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
<!--【注意】 security所有的url配置必须以/开头, 否则启动报错-->
<!--
/* 当前这个目录下的所有文件
/** 当前及子目录下的所有文件
-->
<!--静态资源过滤 security:none放行-->

    <security:http pattern="/login.html" security="none"/>
    <security:http pattern="/fail.html" security="none"/>
    <security:http pattern="/js/**" security="none"/>
    <security:http pattern="/user/register.do" security="none"/>
    <security:http pattern="/403.html" security="none"/>

<!--  拦截的规则: 标定要访问哪些url，登陆用户必须有哪些权限才可以访问
    http:使用协议，http请求
    auto-config: 是否自动配置，处理登陆请求，如果没有登陆页面，帮我们生成，处理退出...CSRF过滤...
    use-expressions: 是否使用sp el表达式 hasAnyRole, hasRole hasAuthority...
    intercept-url: 拦截url配置,
    pattern: 匹配的路径规则, /** 所有url请求
    access:登陆用户要访问这个url（pattern）,就需要有相应的权限才可以访问, 填写值可以是表达式(use-expressions=true)
           还可以是大写ROLE_开头的字符串(use-expressions=false)
  -->
    <security:http auto-config="true" use-expressions="true">
        <!--isAuthenticated 只要认证通过就可以访问-->
        <security:intercept-url pattern="/index.html"  access="isAuthenticated()" />
        <security:intercept-url pattern="/a.html"  access="isAuthenticated()" />
        <security:intercept-url pattern="/checkitem/**"  access="isAuthenticated()" />

        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/b.html"  access="hasAuthority('add')" />

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/c.html"  access="hasRole('ADMIN')" />

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面-->
        <security:intercept-url pattern="/d.html"  access="hasRole('ABC')" />

        <security:form-login
            login-page="/login.html"
            login-processing-url="/login.do"
            username-parameter="username"
            password-parameter="password"
            default-target-url="/index.html"
            authentication-failure-url="/fail.html"
            always-use-default-target="true"
        ></security:form-login>
<!--    关闭跨域访问控制    -->
        <security:csrf disabled="true"/>
<!--    没有权限处理    -->
        <security:access-denied-handler error-page="/403.html"/>

<!--     logout-url: 退出时请求的地址, invalidate-session:注销session, delete-cookies:删除cookie, logout-success-url:退出后跳转的地址   -->
        <security:logout logout-url="/logout.do" invalidate-session="true" delete-cookies="true" logout-success-url="/login.html"/>
    </security:http>

<!--  开启注解权限控制  -->
    <security:global-method-security pre-post-annotations="enabled"/>

<!--  认证管理器: 提供登陆用户信息, 从哪里获取登陆用户的信息  -->
    <security:authentication-manager>
<!--  用户信息的供应商, 提供登陆用户的信息的
 user-service-ref: 找spring容器中的一个bean对象来获取登陆用户信息
 -->
        <security:authentication-provider user-service-ref="userService">
<!--   将来进行密码校验时，使用这个加密器来校验    -->
            <security:password-encoder ref="encoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

<!--  注册一个userService, 由@Compent注解与扫包代替
    <bean id="userService" class="com.itheima.service.UserService"/>
      -->
    <context:component-scan base-package="com.itheima"/>
<!--  注册加密器, 假装自己实现  -->
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
</beans>